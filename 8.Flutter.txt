1.Activity
  Activity生命周期:
  onCreate - onStart - onResume - onPause - onStop - onDestory
             onRestart

  Activity启动模式：
  1.standard：
  2.singleTop：
  3.singleTask：
  4.singleInstance：

  常用的标记位Flags：
  FLAG_ACTIVITY_NEW_TASK：为Activity指定“singleTask”启动模式，和在XMl指定效果一样
  FLAG_ACTIVIYT_SINGLE_TOP：为Activity指定“singleTop”启动模式
  FLAG_ACTIVITY_CLEAR_TOP：和FLAG_ACTIVITY_NEW_TASK连用，是指同一任务栈内位于该Activity上面的所有Activity都要出栈；

  用Intent传递数据和Bundle传递数据的区别：
  Bundle旨在存储数据，而Intent旨在传值

  setContentView会发生什么：
  setContentView的作用是将View加载到根view之上，
  这样当显示view时，先显示根view，然后在显示子view，以此类推，最终将所有view显示出来

  Activity 状态保存于恢复
  在 Activity 生命周期中，Android 会在销毁 Activity 之前调用 onSaveInstanceState () ，以便你保存有关应用状态的数据。 
  然后，你可以在 onCreate () 或 onRestoreInstanceState () 期间恢复 Activity 状态

2.Fragment
  Fragment生命周期：
  onAttach() ：当Fragment与Activity发生关联时调用
  onCreate()：创建Fragment时被回调
  onCreateView()：每次创建、绘制该Fragment的View组件时回调该方法，Fragment将会显示该方法返回的View 组件
  onActivityCreated()：当 Fragment 所在的Activity被启动完成后回调该方法
  onStart()：启动 Fragment 时被回调，此时Fragment可见
  onResume()：恢复 Fragment 时被回调，获取焦点时回调
  onPause()：暂停 Fragment 时被回调，失去焦点时回调
  onStop()：停止 Fragment 时被回调，Fragment不可见时回调
  onDestroyView()：销毁与Fragment有关的视图，但未与Activity解除绑定
  onDestroy()：销毁 Fragment 时被回调
  onDetach()：与onAttach相对应，当Fragment与Activity关联被取消时调用

3.Service
  Service生命周期：
  startService:onCreate-onStartCommand-onDestory
  bindService:onCreate-onBind-onUnbind-onDestory

4.BroadcastReceiver
  广播类型:
  静态广播
  动态广播

5.ContentProvider

6.Handler
  1.Handler
  2.Message
  3.MessageQueue
  4.Looper

    Looper死循环为什么不会导致应用卡死？
    loop无限循环用于取出消息并将消息分发出去，没有消息时会阻塞在queue.next()里的nativePollOnce()方法里，并释放CPU资源进入休眠。
    Android的绝大部分操作都是通过Handler机制来完成的，如果没有消息，则不需要程序去响应，就不会有ANR。
    ANR一般是消息的处理过程中耗时太长导致没有及时响应用户操作。

7.Binder
  用户空间：
  1.Server
  2.Client
  3.ServiceManager
  内核空间：
  4.Binder驱动

  AIDL用于进程通信，
  
8.Activity,Window,View关系
  一个Activity构造的时候只能初始化一个Window(PhoneWindow)，
  另外这个PhoneWindow有一个”ViewRoot”，
  这个”ViewRoot”是一个View活ViewGroup，是最初始的根视图，
  然后通过addView方法将View一个个层叠到ViewRoot上，这些层叠的View最终放在Window这个载体上面

9.View事件分发机制
  1.dispathchTouchEvent
  2.onInterceptTouchEvent
  3.onTouchEvent  
  
  Activity->PhoneWindow->DeccorView->ViewGroup->…->View

10.绘图流程
   View绘制原理：
   measure
   layout
   draw

11.自定义控件
   1.自定义View：继承View 
   2.基于现有组件：继承View的派生类 
   3.组合的方式：自定义控件中包含了其他的组件

12.优化
   1.UI优化：层次不要太深Layout Inspector|include,merge,ViewStub
   2.安装包优化：通过配置gradle脚本减少，或者压缩   

14.ANR
   Activity出现ANR是超过5秒
   Broadcast出现ANR是超过10秒
   Service出现ANR是超过20秒
   ContentProvider20s

  查看ANR日志
  ANR日志的存放目录：\data\anr\traces.txt

15.system_ server这个进程中的线程
   AMS：ActivityManagerService
   WMS：WindowManagerService
   PMS：PackageManagerService

16.ListView & RecyclerView区别
   ListView：
    继承重写BaseAdapter类；
    自定义ViewHolder与convertView的优化；
   RecyclerView：
    继承重写RecyclerView.Adapter与RecyclerView.ViewHolder
    设置LayoutManager，以及layout的布局效果
   区别：
    ViewHolder的编写规范化，ListView是需要自己定义的，而RecyclerView是规范好的；
    RecyclerView复用item全部搞定，不需要像ListView那样setTag()与getTag()；
    RecyclerView多了一些LayoutManager工作，但实现了布局效果多样化；

17.SharedPreference的apply和commit的区别
   SharedPreference 相关修改使用 apply 方法进行提交会先写入内存，然后异步写入磁盘，commit
   方法是直接写入磁盘。如果频繁操作的话 apply 的性能会优于 commit，apply会将最后修改内容写入磁盘。
   但是如果希望立刻获取存储操作的结果，并据此做相应的其他操作，应当使用 commit。

18.Bunder 传递对象为什么需要序列化？Serialzable 和 Parcelable 的区别？
   因为bundle传递数据时，只支持基本数据类型，所以在传递数据时，要将对象序列化转化成可以存储或者可以传输的本质状态，即字节流。序列化后的对象可以在网络，页面之间传递，也可以存储到本地。
   Serialzable简单但是低效，开销大，适合将对象序列化后，进行本地存储和网络传输。Parcelable高效但是麻烦，适合内存序列化，安卓传递对象专用。

19.CrashHandler UncaughtExceptionHandler
   获取没有捕获的异常

20.App 启动流程
    1.Launcher通知AMS，要启动测试App,而且指定要启动App的哪个页面(也就是AndvoidManifest中设置的首页)
    2.AMS通知Launcher,"好了，我知道了，没你什么事情了“，同时记住要启动的首页
    3.Launcher当前页面进入Paused状态，通知AMS，“我睡了，你可以去找测试App了”
    4.AMS检查测试App是否已经启动，是，则唤起测试App即可，否，就要启动一个新的进程，AMS在新的进程创建一个ActiivtyThread,启动其中的main函数
    5.测试App启动后，通知AMS，“我启动好了”
    6.AMS找到第二步存放的值，告诉测试APP，启动哪个页面
    7.测试App启动首页，创建context并与首页Activity关联，然后调用Activity的onCreate方法
    至此启动流程完成，可分成两部分：第1～3阶段，Launcher和AMS相互通信；第4～7阶段，测试App和AMS相互通信

21.ActivityThread 工作原理
   ActivityThread：应用的入口类，通过调用main方法，开启消息循环队列。ActivityThread所在的线程被称为主线程。

22.动画
  1.视图动画
  2.帧动画
  3.属性动画

23.保活
  android 保活的终极方案：双进程守护保活。 
  就是在一个 app 中，启用双进程，如果有一个进程被杀了，另一个进程马上重新拉起这个进程，
  两个进程互相守护以达到保活的目的。 基础配置就是两个保活的逻辑 Service 和一个用于进程间通讯的 ADIL 文件。

24.ViewModel,LiveData
   MVVM基础：Model,(Activity,Fragment),(ViewModel + LiveData)

25.OkHttp,Retrofit
   HTTP基础

26.Room
   SQLite基础

27.Glide
   图片基础，处理好缓存

28.LeakCanary
   内存泄漏检测
